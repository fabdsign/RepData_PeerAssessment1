fileUrl1 <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl1,destfile="/.data/americanComService.csv")
dateDloaded <- date()
dateDloaded
fileUrl1 <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl1,destfile="americanComService.csv")
dateDloaded <- date()
dateDloaded
rm(req)
rm(myapp)
rm(json1)
rm(gtoken)
rm(github-token)
rm(github_token)
rm(json2)
rm(dateDloaded)
rm(dateDownloaded)
rm(fileUrl)
rm(fileUrl1)
library("rstudio", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
detach("package:rstudio", unload=TRUE)
library("RMySQL", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("reshape2", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("httr", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("httpuv", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("XML", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("swirl", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("lubridate", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("dplyr", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("rJava", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
detach("package:RMySQL", unload=TRUE)
detach("package:rJava", unload=TRUE)
detach("package:reshape2", unload=TRUE)
detach("package:XML", unload=TRUE)
detach("package:lubridate", unload=TRUE)
detach("package:httr", unload=TRUE)
detach("package:httpuv", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:DBI", unload=TRUE)
swirl()
library(swirl)
swirl()
swirl()
swirl()
swirl()
detach("package:swirl", unload=TRUE)
install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library (datasets)
pdf(file = "myplot.pdf")
with(faithful, plot(erupt, waiting)
dev.copy(png, file = "geyserplot.png"
title(main = "Old Faithful Geiser data")
dev.off()
pdf(file = "myplot.pdf") ##open pdf dvice and saves a file in working directory
## Create the plot
with(faithful, plot(erupt, waiting)
##dev.copy(png, file = "geyserplot.png")
title(main = "Old Faithful Geiser data") ##annotate plot; nothing on the screen
dev.off()
dev.cur()
quit()
library(datasets)
x <- rnorm(100)
y <- x + rnorm(100)
hist(x, y)
hist(x, y, break = 10)
boxplot(x, y)
boxplot(x, y)
boxplot(x, y, break(100))
data(airquality)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
detach(ggplot2)
detach("package:ggplot2", unload=TRUE)
install.packages("lattice")
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?xyplot
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print (p)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
detach("package:lattice", unload=TRUE)
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
detach("package:ggplot2", unload=TRUE)
library("lattice", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality, text("bullo"))
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
text = "bullo"
print (p)
?panel.lmline
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.characters(1:12))
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame (x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
dataFrame <- data.frame (x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame) [sample(1:12), ]
heatmap(dataMatrix)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
heatmap(dataMatrix)
library("swirl", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(.cran, package)
by_package <- group_by(cran, package)
by_package
summerize(by_package, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
View(top_unique)
top_unique_sorted <- (top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
skip()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20)
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20)
print
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20)
print()
skip()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter( size_mb <= 0.5)
skip()
submit()
library("swirl", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- (cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
submit()
reset()
submit()
skip()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top _cunts <- filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted(top_counts, count)
top_counts_sorted <- (top_counts, count)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library("dplyr", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
ddply(InsectSprays,.(spray), summarize,sum = sum(count))
ddplyr(InsectSprays,.(spray), summarize,sum = sum(count))
?ddply
dplyr(InsectSprays,.(spray), summarize,sum = sum(count))
dply(InsectSprays,.(spray), summarize,sum = sum(count))
detach("package:dplyr", unload=TRUE)
library("swirl", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
swirl()
library(tydyr)
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class")
)
reset()
reset()
submit()
students3
submit()
submit()
submit()
submit()
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status)
mutate( status = "passed")
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit
submit()
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
today()
today
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("192012//")
ymd("192012\\")
ymd("1920\1\2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, min = 34, seconds = 55)
this_moment <- update(this_moment, hours = 8, min = 34, seconds = 55)
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 8, min = 34, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 16, minutes = 41)
this_moment
nyc <- now("America/NewYork")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15), minutes(50)
arrive <- depart + hours(15) minutes(50)
arrive <- depart + hours(15)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive, tzone = ("Asia/Hong_Kong")
)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
0
how_long
depart
arrive
dt1
dt2
last_time
my_date
this_day
this_moment
this_moment <- now(this_date)
this_moment <- now()
this_moment
library("swirl", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Fabio")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z") sep = "")
paste(c(1:3), c("X", "Y", "Z"), sep = '')
paste(LETTERS, 1:4, sep = "-")
paste(LETTERS, 1:9, sep = "-")
paste(LETTERS, 1:9, sep = "=")
paste(LETTERS, 1:9, sep = " = ")
numerology <- paste(LETTERS, 1:9, sep = " = ")
numerology
numerology
class(numerology)
str(numerology)
dim(numerology)
length(numerology)
swirl()
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vet["bar"]
vect["bar"]
vect[c("foo", "bar")]
x[c(2, 10)]
x
x[-c(2, 10)]
detach("package:swirl", unload=TRUE)
install.packages("knitr")
install.packages("slidify")
install.packages("slidify")
ap <-available.packages
View(ap)
rm(ap)
ap <-available.packages()
View()
View(ap)
slideap <- subset(ap, package = "slidify")
View(slideap)
rm(slideap)
apslide<- ap[,5000:]
apslide<- ap(),5000:)
apslide<- ap(,5000:)
apslide<- ap(5000:)
apslide<- ap[5000:]
apslide<- ap[,5000:]
apslide <- ap[,5000:]
ap(5000:5005)
ap[5000:5005]
ap[5100:5105]
ap[5200:5230]
ap[5400:5430]
ap[5600:5650]
ap[5650:5700]
ap[5800:5850]
ap[5750:5800]
ap[5700:5750]
?setRepositories
setRepositories()
install.packages("slidify")
setRepositories()
install.packages("slidify")
require(devtools)
install.packages("devtools")
install.packages("slidify")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
install.packages("slidify")
library("slidify", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("slidifyLibraries", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
?lm
data(airquality)
rm(airquality)
library(datasets)
head(airquality)
class(airquality)
str(airquality)
data(airquality)
rm(airquality)
data <- airquality
summary(airquality)
cleaned <- summary(airquality, !is.na(airquality$Ozone, airquality$Solar.R))
head(cleaned)
cleaned <- summary(!is.na(airquality$Ozone, airquality$Solar.R))
cleaned <- summary(!is.na(airquality$Ozone))
head(cleaned)
cleaned <- !is.na(airquality$Ozone)
head(cleaned)
sum(clenaed)
sum(clened)
sum(cleaned)
nas <- is.na(airquality$Ozone)
sum(nas)
cleanMean <- sum(!is(airquality$Solar.R))
cleanMean <- summary(!is(airquality$Solar.R))
cleanMean <- select(!is(airquality$Solar.R))
library(dplyr)
cleanMean <- select(!is(airquality$Solar.R))
cleanMean <- select(!is.na(airquality, Solar.R))
cleanMean <- select(!is.na(airquality$Solar.R))
cleanMean <- select(airquality,!is.na(Solar.R))
cleanMean <- select(airquality,Solar.R)
clenaMean
tail(clenaMean)
tail(cleanMean)
cleanMean <- select(airquality,Solar.R + Ozone + Day)
cleanMean <- select(airquality,Solar.R, Ozone, Day)
head(cleanMean, n = 9)
cleanMean <- select(airquality,Solar.R:Day)
head(cleanMean, n = 9)
dir()
setwd("RepData_PeerAssessment1")
data <- read.csv("activity.csv")
library("dplyr", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("knitr", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("ggplot2", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
library("markdown", lib.loc="~/R/i686-pc-linux-gnu-library/3.2")
